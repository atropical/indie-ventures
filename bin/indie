#!/usr/bin/env bash

set -euo pipefail

# Indie Ventures - Self-hosted Supabase Manager
# https://github.com/atropical/indie-ventures

VERSION="0.1.0-alpha"

# Determine script directory (works with symlinks)
if [ -L "$0" ]; then
    # Resolve symlink (for direct installation and Homebrew)
    SCRIPT_DIR="$(cd "$(dirname "$(readlink "$0")")" && pwd)"
else
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

# Set lib directory (prefer env var from Homebrew if available)
if [ -n "${INDIE_LIB_DIR:-}" ]; then
    LIB_DIR="${INDIE_LIB_DIR}"
else
    LIB_DIR="${SCRIPT_DIR}/../lib"
fi

# Set templates directory (prefer env var from Homebrew if available)
# This will be used by utils.sh if not already set
if [ -n "${INDIE_TEMPLATES_DIR:-}" ]; then
    TEMPLATES_DIR="${INDIE_TEMPLATES_DIR}"
else
    TEMPLATES_DIR="${SCRIPT_DIR}/../templates"
fi
export TEMPLATES_DIR

# Load core utilities
# shellcheck source=../lib/core/utils.sh
source "${LIB_DIR}/core/utils.sh"

# Show version
show_version() {
    echo "Indie Ventures v${VERSION}"
    echo "Self-hosted Supabase Manager"
    echo "https://github.com/atropical/indie-ventures"
}

# Show help
show_help() {
    cat << EOF
Indie Ventures - Self-hosted Supabase Manager

Usage:
  indie [--verbose|-v] <command> [options]

Options:
  --verbose, -v     Show detailed execution information

Commands:
  init              Initialize server (first time setup)
  add               Add new project (interactive)
  list              List all projects
  domains <name>    Manage project domains
  ssl <command>     Manage SSL certificates (enable, renew, list, etc.)
  backup <name>     Export project for migration
  remove <name>     Remove project (with backup)
  status            Check service health
  update            Update Indie Ventures CLI to latest version
  version           Show version
  help              Show this help

Examples:
  indie init                    # Initialize server
  indie add                     # Add new project (interactive)
  indie --verbose add           # Add project with detailed output
  indie list                    # List all projects
  indie domains my-blog         # Manage domains for my-blog
  indie ssl enable my-blog      # Enable SSL for my-blog
  indie ssl renew               # Renew all certificates
  indie backup my-blog          # Export my-blog for migration
  indie remove my-blog          # Remove my-blog (creates backup first)
  indie status                  # Check if services are running
  indie update                  # Update to latest version (use 'brew upgrade' for Homebrew)

Documentation:
  https://github.com/atropical/indie-ventures/tree/main/docs

Report issues:
  https://github.com/atropical/indie-ventures/issues

EOF
}

# Parse verbose flag and remove from arguments
parse_verbose_flag() {
    local args=()
    
    while [ $# -gt 0 ]; do
        case "$1" in
            --verbose)
                VERBOSE="1"
                export VERBOSE
                shift
                ;;
            -v)
                # Only treat -v as verbose if not the first argument
                # (first arg -v is version command)
                if [ ${#args[@]} -gt 0 ] || [ $# -gt 1 ]; then
                    VERBOSE="1"
                    export VERBOSE
                    shift
                else
                    args+=("$1")
                    shift
                fi
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done
    
    # Return remaining arguments
    printf '%s\n' "${args[@]}"
}

# Main command router
main() {
    # Check if command is provided
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi

    # Initialize VERBOSE
    VERBOSE="${VERBOSE:-}"
    export VERBOSE

    # Parse verbose flag from all arguments
    local all_args
    all_args=$(parse_verbose_flag "$@")
    
    # Convert newline-separated to array
    local remaining_args=()
    while IFS= read -r line; do
        [ -n "$line" ] && remaining_args+=("$line")
    done <<< "$all_args"

    # Check if we have a command after parsing
    if [ ${#remaining_args[@]} -eq 0 ]; then
        error "No command provided"
        echo ""
        show_help
        exit 1
    fi

    local command="${remaining_args[0]}"
    
    if [ ${#remaining_args[@]} -gt 1 ]; then
        set -- "${remaining_args[@]:1}"
    else
        set --
    fi

    case "${command}" in
        init)
            # shellcheck source=../lib/commands/init.sh
            source "${LIB_DIR}/commands/init.sh"
            cmd_init "$@"
            ;;
        add)
            # shellcheck source=../lib/commands/add.sh
            source "${LIB_DIR}/commands/add.sh"
            cmd_add "$@"
            ;;
        list|ls)
            # shellcheck source=../lib/commands/list.sh
            source "${LIB_DIR}/commands/list.sh"
            cmd_list "$@"
            ;;
        domains)
            # shellcheck source=../lib/commands/domains.sh
            source "${LIB_DIR}/commands/domains.sh"
            cmd_domains "$@"
            ;;
        ssl|cert|certs|certificate)
            # shellcheck source=../lib/commands/ssl.sh
            source "${LIB_DIR}/commands/ssl.sh"
            cmd_ssl "$@"
            ;;
        backup|export)
            # shellcheck source=../lib/commands/backup.sh
            source "${LIB_DIR}/commands/backup.sh"
            cmd_backup "$@"
            ;;
        remove|rm|delete)
            # shellcheck source=../lib/commands/remove.sh
            source "${LIB_DIR}/commands/remove.sh"
            cmd_remove "$@"
            ;;
        status|health)
            # shellcheck source=../lib/commands/status.sh
            source "${LIB_DIR}/commands/status.sh"
            cmd_status "$@"
            ;;
        update|upgrade)
            # shellcheck source=../lib/commands/update.sh
            source "${LIB_DIR}/commands/update.sh"
            cmd_update "$@"
            ;;
        version|-v|--version)
            show_version
            ;;
        help|-h|--help)
            show_help
            ;;
        *)
            error "Unknown command: ${command}"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
